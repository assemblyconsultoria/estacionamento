-- Database: estacionamento
-- Description: Schema for parking management system

-- Create database (run this separately if needed)
-- CREATE DATABASE estacionamento;

-- Connect to the database
\c estacionamento;

-- Enable UUID extension
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Drop tables if they exist (for clean migration)
DROP TABLE IF EXISTS vehicles CASCADE;
DROP TABLE IF EXISTS users CASCADE;
DROP TYPE IF EXISTS vehicle_status;

-- Create ENUM type for vehicle status
CREATE TYPE vehicle_status AS ENUM ('estacionado', 'retirado');

-- Users table
CREATE TABLE users (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    username VARCHAR(100) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Vehicles table
CREATE TABLE vehicles (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    marca VARCHAR(100) NOT NULL,
    modelo VARCHAR(100) NOT NULL,
    placa VARCHAR(20) NOT NULL,
    data_entrada TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    data_saida TIMESTAMP WITH TIME ZONE,
    valor_total NUMERIC(10, 2),
    status vehicle_status NOT NULL DEFAULT 'estacionado',
    user_id UUID REFERENCES users(id),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Create indexes for better query performance
CREATE INDEX idx_vehicles_placa ON vehicles(placa);
CREATE INDEX idx_vehicles_status ON vehicles(status);
CREATE INDEX idx_vehicles_data_entrada ON vehicles(data_entrada);
CREATE INDEX idx_vehicles_user_id ON vehicles(user_id);
CREATE INDEX idx_users_username ON users(username);

-- Create unique index for active vehicles (one placa per active vehicle)
CREATE UNIQUE INDEX idx_vehicles_active_placa ON vehicles(placa)
WHERE status = 'estacionado';

-- Create function to update updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Create triggers for updated_at
CREATE TRIGGER update_users_updated_at BEFORE UPDATE ON users
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_vehicles_updated_at BEFORE UPDATE ON vehicles
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- Insert default test user (password: "senha123")
-- Password hash for "senha123" using bcrypt
INSERT INTO users (username, password_hash) VALUES
('admin', '$2b$10$YourHashedPasswordHere');

-- Note: The actual password hash will be generated by the backend
-- This is just a placeholder. Use the backend API to create users.

-- Sample vehicle data for testing (optional)
-- INSERT INTO vehicles (marca, modelo, placa, data_entrada, status) VALUES
-- ('Toyota', 'Corolla', 'ABC-1234', NOW() - INTERVAL '2 hours', 'estacionado'),
-- ('Honda', 'Civic', 'XYZ-5678', NOW() - INTERVAL '1 hour', 'estacionado'),
-- ('Ford', 'Focus', 'DEF-9012', NOW() - INTERVAL '3 hours', 'retirado');
