version: '3.8'

services:
  # PostgreSQL Database
  database:
    image: postgres:16-alpine
    container_name: estacionamento-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-estacionamento}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres123}
      POSTGRES_INITDB_ARGS: "-E UTF8"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./backend/database/docker-init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    ports:
      - "${DB_PORT:-5430}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-estacionamento}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - estacionamento-network

  # Unified Application (Frontend + Backend in single container)
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: estacionamento-app
    restart: unless-stopped
    depends_on:
      database:
        condition: service_healthy
    environment:
      # Backend environment variables
      DB_HOST: database
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-estacionamento}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres123}
      PORT: 3000
      NODE_ENV: production
      JWT_SECRET: ${JWT_SECRET:-change-this-secret-in-production}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-24h}
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost}
    ports:
      - "${APP_PORT:-80}:80"
      - "${BACKEND_PORT:-3000}:3000"
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost/ && wget --no-verbose --tries=1 --spider http://localhost:3000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - estacionamento-network

networks:
  estacionamento-network:
    driver: bridge
    name: estacionamento-network

volumes:
  postgres-data:
    name: estacionamento-postgres-data
